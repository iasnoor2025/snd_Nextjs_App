generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id             Int       @id @default(autoincrement())
  name           String
  address        String?
  email          String?
  phone          String?
  logo           String?
  legal_document String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  @@map("companies")
}

model User {
  id                  Int              @id @default(autoincrement())
  name                String
  email               String           @unique
  password            String
  national_id         String?
  email_verified_at   DateTime?
  provider            String?
  provider_id         String?
  remember_token      String?
  role_id             Int              @default(1)
  status              Int              @default(1)
  isActive            Boolean          @default(true)
  locale              String?
  avatar              String?
  last_login_at       DateTime?
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  customers           Customer[]
  employees           Employee[]
  user_permissions    UserPermission[]
  user_roles          UserRole[]
  payrolls_approved   Payroll[]        @relation("PayrollApprovedBy")
  payrolls_paid       Payroll[]        @relation("PayrollPaidBy")
  rentals_approved    Rental[]         @relation("RentalApprovedBy")
  rentals_completed   Rental[]         @relation("RentalCompletedBy")
  rentals_created     Rental[]         @relation("RentalCreatedBy")
  timesheets_approved Timesheet[]      @relation("TimesheetApprovedBy")

  @@map("users")
}

model Department {
  id           Int           @id @default(autoincrement())
  name         String
  code         String?
  description  String?
  active       Boolean       @default(true)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  deleted_at   DateTime?
  designations Designation[]
  employees    Employee[]

  @@map("departments")
}

model Designation {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  department_id Int?
  is_active     Boolean     @default(true)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  deleted_at    DateTime?
  department    Department? @relation(fields: [department_id], references: [id])
  employees     Employee[]

  @@map("designations")
}

model Employee {
  id                                 Int                         @id @default(autoincrement())
  erpnext_id                         String?
  unit_id                            Int?
  file_number                        String?                     @unique
  employee_id                        String                      @unique
  first_name                         String
  middle_name                        String?
  last_name                          String
  email                              String?
  phone                              String?
  address                            String?
  city                               String?
  state                              String?
  postal_code                        String?
  country                            String?
  nationality                        String?
  date_of_birth                      DateTime?
  hire_date                          DateTime?
  designation_id                     Int?
  department_id                      Int?
  user_id                            Int?
  supervisor                         String?
  hourly_rate                        Decimal?                    @db.Decimal(10, 2)
  basic_salary                       Decimal                     @default(0) @db.Decimal(10, 2)
  food_allowance                     Decimal                     @default(0) @db.Decimal(10, 2)
  housing_allowance                  Decimal                     @default(0) @db.Decimal(10, 2)
  transport_allowance                Decimal                     @default(0) @db.Decimal(10, 2)
  absent_deduction_rate              Decimal                     @default(0) @db.Decimal(10, 2)
  overtime_rate_multiplier           Decimal                     @default(1.5) @db.Decimal(10, 2)
  overtime_fixed_rate                Decimal?                    @db.Decimal(10, 2)
  bank_name                          String?
  bank_account_number                String?
  bank_iban                          String?
  contract_hours_per_day             Int                         @default(8)
  contract_days_per_month            Int                         @default(26)
  emergency_contact_name             String?
  emergency_contact_phone            String?
  emergency_contact_relationship     String?
  notes                              String?
  advance_salary_eligible            Boolean                     @default(true)
  advance_salary_approved_this_month Boolean                     @default(false)
  iqama_number                       String?
  iqama_expiry                       DateTime?
  iqama_cost                         Decimal?                    @db.Decimal(10, 2)
  passport_number                    String?
  passport_expiry                    DateTime?
  driving_license_number             String?
  driving_license_expiry             DateTime?
  driving_license_cost               Decimal?                    @db.Decimal(10, 2)
  operator_license_number            String?
  operator_license_expiry            DateTime?
  operator_license_cost              Decimal?                    @db.Decimal(10, 2)
  tuv_certification_number           String?
  tuv_certification_expiry           DateTime?
  tuv_certification_cost             Decimal?                    @db.Decimal(10, 2)
  spsp_license_number                String?
  spsp_license_expiry                DateTime?
  spsp_license_cost                  Decimal?                    @db.Decimal(10, 2)
  driving_license_file               String?
  operator_license_file              String?
  tuv_certification_file             String?
  spsp_license_file                  String?
  passport_file                      String?
  iqama_file                         String?
  custom_certifications              Json?
  is_operator                        Boolean                     @default(false)
  access_restricted_until            DateTime?
  access_start_date                  DateTime?
  access_end_date                    DateTime?
  access_restriction_reason          String?
  status                             String                      @default("active")
  current_location                   String?
  created_at                         DateTime                    @default(now())
  updated_at                         DateTime                    @updatedAt
  deleted_at                         DateTime?
  advance_payment_histories          AdvancePaymentHistory[]
  advance_payments                   AdvancePayment[]
  employee_assignments               EmployeeAssignment[]

  employee_documents                 EmployeeDocument[]
  employee_leaves                    EmployeeLeave[]
  employee_performance_reviews       EmployeePerformanceReview[]
  employee_resignations              EmployeeResignation[]
  employee_salaries                  EmployeeSalary[]
  employee_skills                    EmployeeSkill[]
  employee_trainings                 EmployeeTraining[]
  department                         Department?                 @relation(fields: [department_id], references: [id])
  designation                        Designation?                @relation(fields: [designation_id], references: [id])
  unit                               OrganizationalUnit?         @relation("UnitEmployees", fields: [unit_id], references: [id])
  user                               User?                       @relation(fields: [user_id], references: [id])
  equipment_assigned                 Equipment[]                 @relation("EquipmentAssignedTo")
  loans                              Loan[]
  managed_units                      OrganizationalUnit[]        @relation("UnitManager")
  payrolls                           Payroll[]
  rental_operator_assignments        RentalOperatorAssignment[]
  salary_increments                  SalaryIncrement[]
  tax_documents                      TaxDocument[]
  time_entries                       TimeEntry[]
  time_off_requests                  TimeOffRequest[]
  timesheets                         Timesheet[]
  weekly_timesheets                  WeeklyTimesheet[]
  equipment_rental_history           EquipmentRentalHistory[]
  project_resources                  ProjectResource[]
  assigned_tasks                     ProjectResource[]          @relation("TaskAssignedTo")

  @@map("employees")
}

model EmployeeAssignment {
  id          Int         @id @default(autoincrement())
  employee_id Int
  project_id  Int?
  rental_id   Int?
  start_date  DateTime
  end_date    DateTime?
  status      String      @default("active")
  notes       String?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  location    String?
  name        String?
  type        String      @default("manual")
  employee    Employee    @relation(fields: [employee_id], references: [id])
  project     Project?    @relation(fields: [project_id], references: [id])
  rental      Rental?     @relation(fields: [rental_id], references: [id])
  timesheets  Timesheet[]

  @@map("employee_assignments")
}

model AdvancePayment {
  id                Int                     @id @default(autoincrement())
  employee_id       Int
  amount            Decimal                 @db.Decimal(10, 2)
  purpose           String
  reason            String?
  status            String                  @default("pending")
  approved_by       Int?
  approved_at       DateTime?
  rejected_by       Int?
  rejected_at       DateTime?
  rejection_reason  String?
  repayment_date    DateTime?
  estimated_months  Int?
  monthly_deduction Decimal?                @db.Decimal(10, 2)
  payment_date      DateTime?
  repaid_amount     Decimal                 @default(0) @db.Decimal(10, 2)
  created_at        DateTime                @default(now())
  updated_at        DateTime                @updatedAt
  deleted_at        DateTime?
  payment_histories AdvancePaymentHistory[]
  employee          Employee                @relation(fields: [employee_id], references: [id])

  @@map("advance_payments")
}

model AdvancePaymentHistory {
  id                 Int            @id @default(autoincrement())
  advance_payment_id Int
  employee_id        Int
  amount             Decimal        @db.Decimal(10, 2)
  payment_date       DateTime
  notes              String?
  recorded_by        Int?
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  deleted_at         DateTime?
  advance_payment    AdvancePayment @relation(fields: [advance_payment_id], references: [id])
  employee           Employee       @relation(fields: [employee_id], references: [id])

  @@map("advance_payment_histories")
}

model EmployeeDocument {
  id            Int      @id @default(autoincrement())
  employee_id   Int
  document_type String
  file_path     String
  file_name     String
  file_size     Int?
  mime_type     String?
  description   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  employee      Employee @relation(fields: [employee_id], references: [id])

  @@map("employee_documents")
}

model EmployeeSalary {
  id             Int      @id @default(autoincrement())
  employee_id    Int
  basic_salary   Decimal  @db.Decimal(10, 2)
  allowances     Decimal  @default(0) @db.Decimal(10, 2)
  deductions     Decimal  @default(0) @db.Decimal(10, 2)
  effective_date DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  employee       Employee @relation(fields: [employee_id], references: [id])

  @@map("employee_salaries")
}

model EmployeeLeave {
  id          Int       @id @default(autoincrement())
  employee_id Int
  leave_type  String
  start_date  DateTime
  end_date    DateTime
  days        Int
  reason      String?
  status      String    @default("pending")
  approved_by Int?
  approved_at DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  employee    Employee  @relation(fields: [employee_id], references: [id])

  @@map("employee_leaves")
}

model EmployeePerformanceReview {
  id          Int      @id @default(autoincrement())
  employee_id Int
  review_date DateTime
  reviewer_id Int?
  rating      Int?
  comments    String?
  goals       String?
  status      String   @default("pending")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  employee    Employee @relation(fields: [employee_id], references: [id])

  @@map("employee_performance_reviews")
}

model EmployeeResignation {
  id                Int       @id @default(autoincrement())
  employee_id       Int
  resignation_date  DateTime
  last_working_date DateTime?
  reason            String?
  status            String    @default("pending")
  approved_by       Int?
  approved_at       DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  employee          Employee  @relation(fields: [employee_id], references: [id])

  @@map("employee_resignations")
}

model Skill {
  id              Int             @id @default(autoincrement())
  name            String
  description     String?
  category        String?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  employee_skills EmployeeSkill[]

  @@map("skills")
}

model EmployeeSkill {
  id                 Int       @id @default(autoincrement())
  employee_id        Int
  skill_id           Int
  proficiency_level  String?
  certified          Boolean   @default(false)
  certification_date DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  employee           Employee  @relation(fields: [employee_id], references: [id])
  skill              Skill     @relation(fields: [skill_id], references: [id])

  @@unique([employee_id, skill_id])
  @@map("employee_skill")
}

model Training {
  id                 Int                @id @default(autoincrement())
  name               String
  description        String?
  duration           Int?
  cost               Decimal?           @db.Decimal(10, 2)
  provider           String?
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  employee_trainings EmployeeTraining[]

  @@map("trainings")
}

model EmployeeTraining {
  id          Int       @id @default(autoincrement())
  employee_id Int
  training_id Int
  start_date  DateTime?
  end_date    DateTime?
  status      String    @default("planned")
  certificate String?
  notes       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  employee    Employee  @relation(fields: [employee_id], references: [id])
  training    Training  @relation(fields: [training_id], references: [id])

  @@map("employee_training")
}

model SalaryIncrement {
  id             Int       @id @default(autoincrement())
  employee_id    Int
  increment_type String
  amount         Decimal   @db.Decimal(10, 2)
  percentage     Decimal?  @db.Decimal(5, 2)
  effective_date DateTime
  reason         String?
  approved_by    Int?
  approved_at    DateTime?
  status         String    @default("pending")
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  employee       Employee  @relation(fields: [employee_id], references: [id])

  @@map("salary_increments")
}

model OrganizationalUnit {
  id          Int                  @id @default(autoincrement())
  name        String
  code        String               @unique
  type        String
  parent_id   Int?
  manager_id  Int?
  level       Int                  @default(0)
  description String?
  metadata    Json?
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt
  deleted_at  DateTime?
  employees   Employee[]           @relation("UnitEmployees")
  manager     Employee?            @relation("UnitManager", fields: [manager_id], references: [id])
  parent      OrganizationalUnit?  @relation("OrganizationalUnitHierarchy", fields: [parent_id], references: [id])
  children    OrganizationalUnit[] @relation("OrganizationalUnitHierarchy")

  @@map("organizational_units")
}

model Payroll {
  id                    Int                  @id @default(autoincrement())
  employee_id           Int
  month                 Int
  year                  Int
  base_salary           Decimal              @db.Decimal(10, 2)
  overtime_amount       Decimal              @default(0) @db.Decimal(10, 2)
  bonus_amount          Decimal              @default(0) @db.Decimal(10, 2)
  deduction_amount      Decimal              @default(0) @db.Decimal(10, 2)
  advance_deduction     Decimal              @default(0) @db.Decimal(10, 2)
  final_amount          Decimal              @db.Decimal(10, 2)
  total_worked_hours    Decimal              @default(0) @db.Decimal(8, 2)
  overtime_hours        Decimal              @default(0) @db.Decimal(8, 2)
  status                String               @default("pending")
  notes                 String?
  approved_by           Int?
  approved_at           DateTime?
  paid_by               Int?
  paid_at               DateTime?
  payment_method        String?
  payment_reference     String?
  payment_status        String?
  payment_processed_at  DateTime?
  currency              String               @default("SAR")
  payroll_run_id        Int?
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  deleted_at            DateTime?
  items                 PayrollItem[]
  approved_by_user      User?                @relation("PayrollApprovedBy", fields: [approved_by], references: [id])
  employee              Employee             @relation(fields: [employee_id], references: [id])
  paid_by_user          User?                @relation("PayrollPaidBy", fields: [paid_by], references: [id])
  payroll_run           PayrollRun?          @relation(fields: [payroll_run_id], references: [id])
  tax_document_payrolls TaxDocumentPayroll[]

  @@unique([employee_id, month, year])
  @@map("payrolls")
}

model PayrollItem {
  id          Int      @id @default(autoincrement())
  payroll_id  Int
  type        String
  description String
  amount      Decimal  @db.Decimal(10, 2)
  is_taxable  Boolean  @default(true)
  tax_rate    Decimal  @default(0) @db.Decimal(5, 2)
  order       Int      @default(1)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  payroll     Payroll  @relation(fields: [payroll_id], references: [id], onDelete: Cascade)

  @@map("payroll_items")
}

model PayrollRun {
  id              Int       @id @default(autoincrement())
  batch_id        String    @unique
  run_date        DateTime
  status          String    @default("pending")
  run_by          Int
  total_employees Int       @default(0)
  notes           String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  payrolls        Payroll[]

  @@map("payroll_runs")
}

model Loan {
  id              Int       @id @default(autoincrement())
  employee_id     Int
  amount          Decimal   @db.Decimal(10, 2)
  loan_type       String
  interest_rate   Decimal?  @db.Decimal(5, 2)
  term_months     Int
  monthly_payment Decimal   @db.Decimal(10, 2)
  status          String    @default("pending")
  approved_by     Int?
  approved_at     DateTime?
  notes           String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  employee        Employee  @relation(fields: [employee_id], references: [id])

  @@map("loans")
}

model TaxDocument {
  id                    Int                  @id @default(autoincrement())
  employee_id           Int
  document_type         String
  year                  Int
  amount                Decimal              @db.Decimal(10, 2)
  file_path             String?
  status                String               @default("pending")
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  tax_document_payrolls TaxDocumentPayroll[]
  employee              Employee             @relation(fields: [employee_id], references: [id])

  @@map("tax_documents")
}

model TaxDocumentPayroll {
  id              Int         @id @default(autoincrement())
  tax_document_id Int
  payroll_id      Int
  amount          Decimal     @db.Decimal(10, 2)
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  payroll         Payroll     @relation(fields: [payroll_id], references: [id])
  tax_document    TaxDocument @relation(fields: [tax_document_id], references: [id])

  @@map("tax_document_payrolls")
}

model Timesheet {
  id                  Int                 @id @default(autoincrement())
  employee_id         Int
  assignment_id       Int?
  project_id          Int?
  rental_id           Int?
  description         String?
  date                DateTime
  start_time          DateTime
  end_time            DateTime?
  hours_worked        Decimal             @default(0) @db.Decimal(5, 2)
  overtime_hours      Decimal             @default(0) @db.Decimal(5, 2)
  status              String              @default("pending")
  created_by          Int?
  approved_by         Int?
  approved_at         DateTime?
  notes               String?
  rejection_reason    String?
  location            String?
  project             String?
  tasks               String?
  submitted_at        DateTime?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  deleted_at          DateTime?
  time_entries        TimeEntry[]
  timesheet_approvals TimesheetApproval[]
  approved_by_user    User?               @relation("TimesheetApprovedBy", fields: [approved_by], references: [id])
  assignment          EmployeeAssignment? @relation(fields: [assignment_id], references: [id])
  employee            Employee            @relation(fields: [employee_id], references: [id])
  project_rel         Project?            @relation(fields: [project_id], references: [id])
  rental              Rental?             @relation(fields: [rental_id], references: [id])

  @@unique([employee_id, date])
  @@map("timesheets")
}

model TimeEntry {
  id           Int       @id @default(autoincrement())
  employee_id  Int
  timesheet_id Int
  start_time   DateTime
  end_time     DateTime?
  hours        Decimal   @db.Decimal(5, 2)
  description  String?
  location     String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  employee     Employee  @relation(fields: [employee_id], references: [id])
  timesheet    Timesheet @relation(fields: [timesheet_id], references: [id])

  @@map("time_entries")
}

model WeeklyTimesheet {
  id             Int       @id @default(autoincrement())
  employee_id    Int
  week_start     DateTime
  week_end       DateTime
  total_hours    Decimal   @db.Decimal(8, 2)
  overtime_hours Decimal   @db.Decimal(8, 2)
  status         String    @default("pending")
  approved_by    Int?
  approved_at    DateTime?
  notes          String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  employee       Employee  @relation(fields: [employee_id], references: [id])

  @@map("weekly_timesheets")
}

model TimesheetApproval {
  id           Int       @id @default(autoincrement())
  timesheet_id Int
  approver_id  Int
  status       String
  comments     String?
  approved_at  DateTime
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  timesheet    Timesheet @relation(fields: [timesheet_id], references: [id])

  @@map("timesheet_approvals")
}

model TimeOffRequest {
  id          Int       @id @default(autoincrement())
  employee_id Int
  leave_type  String
  start_date  DateTime
  end_date    DateTime
  days        Int
  reason      String?
  status      String    @default("pending")
  approved_by Int?
  approved_at DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  employee    Employee  @relation(fields: [employee_id], references: [id])

  @@map("time_off_requests")
}

model GeofenceZone {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  latitude    Decimal  @db.Decimal(10, 8)
  longitude   Decimal  @db.Decimal(11, 8)
  radius      Decimal  @db.Decimal(8, 2)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("geofence_zones")
}

model Customer {
  id             Int       @id @default(autoincrement())
  name           String
  contact_person String?
  email          String?
  phone          String?
  address        String?
  city           String?
  state          String?
  postal_code    String?
  zip            String?
  country        String?
  website        String?
  tax_id         String?
  payment_terms  String?
  tax_number     String?
  credit_limit   Decimal?  @db.Decimal(12, 2)
  is_active      Boolean   @default(true)
  status         String    @default("active")
  notes          String?
  user_id        Int?
  erpnext_id     String?   @unique
  company_name   String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?
  user           User?     @relation(fields: [user_id], references: [id])
  projects       Project[]
  rentals        Rental[]

  @@map("customers")
}

model Equipment {
  id                          Int          @id @default(autoincrement())
  name                        String
  description                 String?
  category_id                 Int?
  manufacturer                String?
  model_number                String?
  serial_number               String?
  purchase_date               DateTime?
  purchase_price              Decimal?     @db.Decimal(12, 2)
  warranty_expiry_date        DateTime?
  status                      String       @default("available")
  location_id                 Int?
  assigned_to                 Int?
  last_maintenance_date       DateTime?
  next_maintenance_date       DateTime?
  notes                       String?
  unit                        String?
  default_unit_cost           Decimal?     @db.Decimal(12, 2)
  is_active                   Boolean      @default(true)
  daily_rate                  Decimal?     @db.Decimal(12, 2)
  weekly_rate                 Decimal?     @db.Decimal(12, 2)
  monthly_rate                Decimal?     @db.Decimal(12, 2)
  erpnext_id                  String?      @unique
  door_number                 String?      @unique
  current_operating_hours     Decimal?     @db.Decimal(10, 2)
  current_mileage             Decimal?     @db.Decimal(10, 2)
  current_cycle_count         Int?
  initial_operating_hours     Decimal?     @db.Decimal(10, 2)
  initial_mileage             Decimal?     @db.Decimal(10, 2)
  initial_cycle_count         Int?
  last_metric_update          DateTime?
  avg_daily_usage_hours       Decimal?     @db.Decimal(10, 2)
  avg_daily_usage_miles       Decimal?     @db.Decimal(10, 2)
  avg_operating_cost_per_hour Decimal?     @db.Decimal(10, 2)
  avg_operating_cost_per_mile Decimal?     @db.Decimal(10, 2)
  lifetime_maintenance_cost   Decimal?     @db.Decimal(15, 2)
  efficiency_rating           Decimal?     @db.Decimal(5, 2)
  next_performance_review     DateTime?
  current_utilization_rate    Decimal?     @db.Decimal(5, 2)
  avg_daily_utilization       Decimal?     @db.Decimal(5, 2)
  avg_weekly_utilization      Decimal?     @db.Decimal(5, 2)
  avg_monthly_utilization     Decimal?     @db.Decimal(5, 2)
  idle_periods_count          Int?
  total_idle_days             Int?
  last_utilization_update     DateTime?
  optimal_utilization_target  Decimal?     @db.Decimal(5, 2)
  utilization_cost_impact     Decimal?     @db.Decimal(10, 2)
  purchase_cost               Decimal?     @db.Decimal(12, 2)
  depreciated_value           Decimal?     @db.Decimal(12, 2)
  depreciation_rate           Decimal?     @db.Decimal(8, 4)
  last_depreciation_update    DateTime?
  expected_replacement_date   DateTime?
  is_fully_depreciated        Boolean      @default(false)
  replacement_cost_estimate   Decimal?     @db.Decimal(12, 2)
  value_appreciation          Decimal?     @db.Decimal(12, 2)
  asset_condition             String?
  supplier_id                 Int?
  created_at                  DateTime     @default(now())
  updated_at                  DateTime     @updatedAt
  deleted_at                  DateTime?
  assigned_employee           Employee?    @relation("EquipmentAssignedTo", fields: [assigned_to], references: [id])
  rental_items                RentalItem[]
  equipment_rental_history    EquipmentRentalHistory[]
  project_resources           ProjectResource[]

  @@map("equipment")
}

model Rental {
  id                          Int                        @id @default(autoincrement())
  customer_id                 Int?
  rental_number               String                     @unique
  project_id                  Int?
  start_date                  DateTime
  expected_end_date           DateTime?
  actual_end_date             DateTime?
  status                      String                     @default("pending")
  subtotal                    Decimal                    @default(0) @db.Decimal(12, 2)
  tax_amount                  Decimal                    @default(0) @db.Decimal(12, 2)
  total_amount                Decimal                    @default(0) @db.Decimal(12, 2)
  discount                    Decimal                    @default(0) @db.Decimal(12, 2)
  tax                         Decimal                    @default(0) @db.Decimal(12, 2)
  final_amount                Decimal                    @default(0) @db.Decimal(12, 2)
  payment_status              String                     @default("pending")
  notes                       String?
  created_by                  Int?
  equipment_name              String?
  description                 String?
  quotation_id                Int?
  mobilization_date           DateTime?
  invoice_date                DateTime?
  deposit_amount              Decimal                    @default(0) @db.Decimal(10, 2)
  payment_terms_days          Int                        @default(30)
  payment_due_date            DateTime?
  has_timesheet               Boolean                    @default(false)
  has_operators               Boolean                    @default(false)
  completed_by                Int?
  completed_at                DateTime?
  approved_by                 Int?
  approved_at                 DateTime?
  deposit_paid                Boolean                    @default(false)
  deposit_paid_date           DateTime?
  deposit_refunded            Boolean                    @default(false)
  deposit_refund_date         DateTime?
  invoice_id                  String?
  location_id                 Int?
  created_at                  DateTime                   @default(now())
  updated_at                  DateTime                   @updatedAt
  deleted_at                  DateTime?
  employee_assignments        EmployeeAssignment[]

  rental_items                RentalItem[]
  rental_operator_assignments RentalOperatorAssignment[]
  approved_by_user            User?                      @relation("RentalApprovedBy", fields: [approved_by], references: [id])
  completed_by_user           User?                      @relation("RentalCompletedBy", fields: [completed_by], references: [id])
  created_by_user             User?                      @relation("RentalCreatedBy", fields: [created_by], references: [id])
  customer                    Customer?                  @relation(fields: [customer_id], references: [id])
  project                     Project?                   @relation(fields: [project_id], references: [id])
  timesheets                  Timesheet[]
  equipment_rental_history   EquipmentRentalHistory[]

  @@map("rentals")
}

model RentalItem {
  id             Int        @id @default(autoincrement())
  rental_id      Int
  equipment_id   Int?
  equipment_name String?
  quantity       Int        @default(1)
  unit_price     Decimal    @db.Decimal(10, 2)
  total_price    Decimal    @db.Decimal(10, 2)
  rate_type      String     @default("daily")
  days           Int?
  operator_id    Int?
  status         String     @default("active")
  notes          String?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  equipment      Equipment? @relation(fields: [equipment_id], references: [id])
  rental         Rental     @relation(fields: [rental_id], references: [id])

  @@map("rental_items")
}

model RentalOperatorAssignment {
  id          Int       @id @default(autoincrement())
  rental_id   Int
  employee_id Int
  start_date  DateTime
  end_date    DateTime?
  status      String    @default("active")
  notes       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  employee    Employee  @relation(fields: [employee_id], references: [id])
  rental      Rental    @relation(fields: [rental_id], references: [id])

  @@map("rental_operator_assignments")
}

model Project {
  id                   Int                  @id @default(autoincrement())
  name                 String
  description          String?
  customer_id          Int?
  start_date           DateTime?
  end_date             DateTime?
  status               String               @default("active")
  budget               Decimal?             @db.Decimal(12, 2)
  notes                String?
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  deleted_at           DateTime?
  employee_assignments EmployeeAssignment[]

  customer             Customer?            @relation(fields: [customer_id], references: [id])
  rentals              Rental[]
  timesheets           Timesheet[]
  equipment_rental_history EquipmentRentalHistory[]
  project_resources    ProjectResource[]

  @@map("projects")
}

model Media {
  id         Int      @id @default(autoincrement())
  file_name  String
  file_path  String
  file_size  Int
  mime_type  String
  disk       String   @default("public")
  collection String?
  model_type String?
  model_id   Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("media")
}

model PasswordResetToken {
  email      String    @id
  token      String
  created_at DateTime?

  @@map("password_reset_tokens")
}

model Session {
  id            String  @id
  user_id       Int?
  ip_address    String?
  user_agent    String?
  payload       String
  last_activity Int

  @@map("sessions")
}

model Cache {
  key        String @id
  value      String
  expiration Int

  @@map("cache")
}

model Job {
  id           Int    @id @default(autoincrement())
  queue        String
  payload      String
  attempts     Int
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@map("jobs")
}

model FailedJob {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now())

  @@map("failed_jobs")
}

model PersonalAccessToken {
  id             Int       @id @default(autoincrement())
  tokenable_type String
  tokenable_id   Int
  name           String
  token          String    @unique
  abilities      String?
  last_used_at   DateTime?
  expires_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("personal_access_tokens")
}

model TelescopeEntry {
  sequence                Int      @id
  uuid                    String   @unique
  batch_id                String?
  family_hash             String?
  should_index_on_display Boolean  @default(true)
  type                    String
  content                 String
  occurred_at             DateTime
  created_at              DateTime @default(now())

  @@map("telescope_entries")
}

model TelescopeEntryTag {
  entry_uuid String
  tag        String

  @@id([entry_uuid, tag])
  @@map("telescope_entry_tags")
}

model TelescopeMonitoring {
  tag String @id

  @@map("telescope_monitoring")
}

model Permission {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  guard_name       String           @default("web")
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  user_permissions UserPermission[]
  role_permissions RolePermission[]

  @@map("permissions")
}

model Role {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  guard_name       String           @default("web")
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  user_roles       UserRole[]
  role_permissions RolePermission[]

  @@map("roles")
}

model RolePermission {
  permission_id Int
  role_id       Int
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("role_has_permissions")
}

model UserRole {
  role_id Int
  user_id Int
  role    Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("model_has_roles")
}

model UserPermission {
  permission_id Int
  user_id       Int
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([permission_id, user_id])
  @@map("model_has_permissions")
}

model AnalyticsReport {
  id             Int       @id @default(autoincrement())
  name           String
  type           String
  description    String?
  status         String    @default("active")
  created_by     String?
  schedule       String?
  parameters     String?
  is_active      Boolean   @default(true)
  last_generated DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("analytics_reports")
}

model EquipmentRentalHistory {
  id                    Int       @id @default(autoincrement())
  equipment_id          Int
  rental_id             Int?
  project_id            Int?
  employee_id           Int?
  assignment_type       String    @default("rental") // "rental", "manual", "project"
  start_date            DateTime
  end_date              DateTime?
  status                String    @default("active")
  notes                 String?
  daily_rate            Decimal?  @db.Decimal(10, 2)
  total_amount          Decimal?  @db.Decimal(10, 2)
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  equipment             Equipment @relation(fields: [equipment_id], references: [id])
  rental                Rental?   @relation(fields: [rental_id], references: [id])
  project               Project?  @relation(fields: [project_id], references: [id])
  employee              Employee? @relation(fields: [employee_id], references: [id])

  @@map("equipment_rental_history")
}

model Location {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  address     String?
  city        String?
  state       String?
  zip_code    String?
  country     String?
  latitude    Decimal?  @db.Decimal(10, 8)
  longitude   Decimal?  @db.Decimal(11, 8)
  is_active   Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@map("locations")
}

model ProjectResource {
  id                    Int       @id @default(autoincrement())
  project_id            Int
  type                  String    // "manpower", "equipment", "material", "fuel", "expense", "tasks"
  name                  String
  description           String?
  quantity              Int?
  unit_cost             Decimal?  @db.Decimal(10, 2)
  total_cost            Decimal?  @db.Decimal(10, 2)
  date                  DateTime?
  status                String    @default("pending") // "pending", "in_progress", "completed", "cancelled"
  notes                 String?

  // Manpower specific fields
  employee_id           Int?
  worker_name           String?
  job_title             String?
  daily_rate            Decimal?  @db.Decimal(10, 2)
  days_worked           Int?
  start_date            DateTime?
  end_date              DateTime?
  total_days            Int?

  // Equipment specific fields
  equipment_id          Int?
  equipment_name        String?
  operator_name         String?
  hourly_rate           Decimal?  @db.Decimal(10, 2)
  hours_worked          Decimal?  @db.Decimal(10, 2)
  usage_hours           Decimal?  @db.Decimal(10, 2)
  maintenance_cost      Decimal?  @db.Decimal(10, 2)

  // Material specific fields
  material_name         String?
  unit                  String?
  unit_price            Decimal?  @db.Decimal(10, 2)
  material_id           Int?

  // Fuel specific fields
  fuel_type             String?
  liters                Decimal?  @db.Decimal(10, 2)
  price_per_liter       Decimal?  @db.Decimal(10, 2)

  // Expense specific fields
  category              String?
  expense_description   String?
  amount                Decimal?  @db.Decimal(10, 2)

  // Task specific fields
  title                 String?
  priority              String?   // "low", "medium", "high"
  due_date              DateTime?
  completion_percentage Int?
  assigned_to_id        Int?

  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  // Relations
  project               Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
  employee              Employee? @relation(fields: [employee_id], references: [id])
  equipment             Equipment? @relation(fields: [equipment_id], references: [id])
  assigned_to           Employee? @relation("TaskAssignedTo", fields: [assigned_to_id], references: [id])

  @@map("project_resources")
}
